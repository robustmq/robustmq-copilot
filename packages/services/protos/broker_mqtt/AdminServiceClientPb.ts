/**
 * @fileoverview gRPC-Web generated client stub for broker.mqtt.admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: admin.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as admin_pb from './admin_pb'; // proto import: "admin.proto"


export class MQTTBrokerAdminServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptormqtt_broker_set_cluster_config = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_cluster_config',
    grpcWeb.MethodType.UNARY,
    admin_pb.SetClusterConfigRequest,
    admin_pb.SetClusterConfigReply,
    (request: admin_pb.SetClusterConfigRequest) => {
      return request.serializeBinary();
    },
    admin_pb.SetClusterConfigReply.deserializeBinary
  );

  mqtt_broker_set_cluster_config(
    request: admin_pb.SetClusterConfigRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.SetClusterConfigReply>;

  mqtt_broker_set_cluster_config(
    request: admin_pb.SetClusterConfigRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.SetClusterConfigReply) => void): grpcWeb.ClientReadableStream<admin_pb.SetClusterConfigReply>;

  mqtt_broker_set_cluster_config(
    request: admin_pb.SetClusterConfigRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.SetClusterConfigReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_cluster_config',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_set_cluster_config,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_cluster_config',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_set_cluster_config);
  }

  methodDescriptormqtt_broker_get_cluster_config = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_get_cluster_config',
    grpcWeb.MethodType.UNARY,
    admin_pb.GetClusterConfigRequest,
    admin_pb.GetClusterConfigReply,
    (request: admin_pb.GetClusterConfigRequest) => {
      return request.serializeBinary();
    },
    admin_pb.GetClusterConfigReply.deserializeBinary
  );

  mqtt_broker_get_cluster_config(
    request: admin_pb.GetClusterConfigRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.GetClusterConfigReply>;

  mqtt_broker_get_cluster_config(
    request: admin_pb.GetClusterConfigRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.GetClusterConfigReply) => void): grpcWeb.ClientReadableStream<admin_pb.GetClusterConfigReply>;

  mqtt_broker_get_cluster_config(
    request: admin_pb.GetClusterConfigRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.GetClusterConfigReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_get_cluster_config',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_get_cluster_config,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_get_cluster_config',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_get_cluster_config);
  }

  methodDescriptorcluster_status = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/cluster_status',
    grpcWeb.MethodType.UNARY,
    admin_pb.ClusterStatusRequest,
    admin_pb.ClusterStatusReply,
    (request: admin_pb.ClusterStatusRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ClusterStatusReply.deserializeBinary
  );

  cluster_status(
    request: admin_pb.ClusterStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ClusterStatusReply>;

  cluster_status(
    request: admin_pb.ClusterStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ClusterStatusReply) => void): grpcWeb.ClientReadableStream<admin_pb.ClusterStatusReply>;

  cluster_status(
    request: admin_pb.ClusterStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ClusterStatusReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/cluster_status',
        request,
        metadata || {},
        this.methodDescriptorcluster_status,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/cluster_status',
    request,
    metadata || {},
    this.methodDescriptorcluster_status);
  }

  methodDescriptorcluster_overview_metrics = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/cluster_overview_metrics',
    grpcWeb.MethodType.UNARY,
    admin_pb.ClusterOverviewMetricsRequest,
    admin_pb.ClusterOverviewMetricsReply,
    (request: admin_pb.ClusterOverviewMetricsRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ClusterOverviewMetricsReply.deserializeBinary
  );

  cluster_overview_metrics(
    request: admin_pb.ClusterOverviewMetricsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ClusterOverviewMetricsReply>;

  cluster_overview_metrics(
    request: admin_pb.ClusterOverviewMetricsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ClusterOverviewMetricsReply) => void): grpcWeb.ClientReadableStream<admin_pb.ClusterOverviewMetricsReply>;

  cluster_overview_metrics(
    request: admin_pb.ClusterOverviewMetricsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ClusterOverviewMetricsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/cluster_overview_metrics',
        request,
        metadata || {},
        this.methodDescriptorcluster_overview_metrics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/cluster_overview_metrics',
    request,
    metadata || {},
    this.methodDescriptorcluster_overview_metrics);
  }

  methodDescriptormqtt_broker_create_user = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_user',
    grpcWeb.MethodType.UNARY,
    admin_pb.CreateUserRequest,
    admin_pb.CreateUserReply,
    (request: admin_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    admin_pb.CreateUserReply.deserializeBinary
  );

  mqtt_broker_create_user(
    request: admin_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.CreateUserReply>;

  mqtt_broker_create_user(
    request: admin_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.CreateUserReply) => void): grpcWeb.ClientReadableStream<admin_pb.CreateUserReply>;

  mqtt_broker_create_user(
    request: admin_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.CreateUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_user',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_create_user,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_user',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_create_user);
  }

  methodDescriptormqtt_broker_delete_user = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_user',
    grpcWeb.MethodType.UNARY,
    admin_pb.DeleteUserRequest,
    admin_pb.DeleteUserReply,
    (request: admin_pb.DeleteUserRequest) => {
      return request.serializeBinary();
    },
    admin_pb.DeleteUserReply.deserializeBinary
  );

  mqtt_broker_delete_user(
    request: admin_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.DeleteUserReply>;

  mqtt_broker_delete_user(
    request: admin_pb.DeleteUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteUserReply) => void): grpcWeb.ClientReadableStream<admin_pb.DeleteUserReply>;

  mqtt_broker_delete_user(
    request: admin_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_user',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_delete_user,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_user',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_delete_user);
  }

  methodDescriptormqtt_broker_list_user = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_user',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListUserRequest,
    admin_pb.ListUserReply,
    (request: admin_pb.ListUserRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListUserReply.deserializeBinary
  );

  mqtt_broker_list_user(
    request: admin_pb.ListUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListUserReply>;

  mqtt_broker_list_user(
    request: admin_pb.ListUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListUserReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListUserReply>;

  mqtt_broker_list_user(
    request: admin_pb.ListUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_user',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_user,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_user',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_user);
  }

  methodDescriptormqtt_broker_list_client = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_client',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListClientRequest,
    admin_pb.ListClientReply,
    (request: admin_pb.ListClientRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListClientReply.deserializeBinary
  );

  mqtt_broker_list_client(
    request: admin_pb.ListClientRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListClientReply>;

  mqtt_broker_list_client(
    request: admin_pb.ListClientRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListClientReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListClientReply>;

  mqtt_broker_list_client(
    request: admin_pb.ListClientRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListClientReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_client',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_client,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_client',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_client);
  }

  methodDescriptormqtt_broker_list_session = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_session',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListSessionRequest,
    admin_pb.ListSessionReply,
    (request: admin_pb.ListSessionRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListSessionReply.deserializeBinary
  );

  mqtt_broker_list_session(
    request: admin_pb.ListSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListSessionReply>;

  mqtt_broker_list_session(
    request: admin_pb.ListSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListSessionReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListSessionReply>;

  mqtt_broker_list_session(
    request: admin_pb.ListSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListSessionReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_session',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_session,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_session',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_session);
  }

  methodDescriptormqtt_broker_list_acl = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_acl',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListAclRequest,
    admin_pb.ListAclReply,
    (request: admin_pb.ListAclRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListAclReply.deserializeBinary
  );

  mqtt_broker_list_acl(
    request: admin_pb.ListAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListAclReply>;

  mqtt_broker_list_acl(
    request: admin_pb.ListAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListAclReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListAclReply>;

  mqtt_broker_list_acl(
    request: admin_pb.ListAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListAclReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_acl',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_acl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_acl',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_acl);
  }

  methodDescriptormqtt_broker_create_acl = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_acl',
    grpcWeb.MethodType.UNARY,
    admin_pb.CreateAclRequest,
    admin_pb.CreateAclReply,
    (request: admin_pb.CreateAclRequest) => {
      return request.serializeBinary();
    },
    admin_pb.CreateAclReply.deserializeBinary
  );

  mqtt_broker_create_acl(
    request: admin_pb.CreateAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.CreateAclReply>;

  mqtt_broker_create_acl(
    request: admin_pb.CreateAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.CreateAclReply) => void): grpcWeb.ClientReadableStream<admin_pb.CreateAclReply>;

  mqtt_broker_create_acl(
    request: admin_pb.CreateAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.CreateAclReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_acl',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_create_acl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_acl',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_create_acl);
  }

  methodDescriptormqtt_broker_delete_acl = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_acl',
    grpcWeb.MethodType.UNARY,
    admin_pb.DeleteAclRequest,
    admin_pb.DeleteAclReply,
    (request: admin_pb.DeleteAclRequest) => {
      return request.serializeBinary();
    },
    admin_pb.DeleteAclReply.deserializeBinary
  );

  mqtt_broker_delete_acl(
    request: admin_pb.DeleteAclRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.DeleteAclReply>;

  mqtt_broker_delete_acl(
    request: admin_pb.DeleteAclRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteAclReply) => void): grpcWeb.ClientReadableStream<admin_pb.DeleteAclReply>;

  mqtt_broker_delete_acl(
    request: admin_pb.DeleteAclRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteAclReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_acl',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_delete_acl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_acl',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_delete_acl);
  }

  methodDescriptormqtt_broker_list_blacklist = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_blacklist',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListBlacklistRequest,
    admin_pb.ListBlacklistReply,
    (request: admin_pb.ListBlacklistRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListBlacklistReply.deserializeBinary
  );

  mqtt_broker_list_blacklist(
    request: admin_pb.ListBlacklistRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListBlacklistReply>;

  mqtt_broker_list_blacklist(
    request: admin_pb.ListBlacklistRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListBlacklistReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListBlacklistReply>;

  mqtt_broker_list_blacklist(
    request: admin_pb.ListBlacklistRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListBlacklistReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_blacklist',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_blacklist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_blacklist',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_blacklist);
  }

  methodDescriptormqtt_broker_delete_blacklist = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_blacklist',
    grpcWeb.MethodType.UNARY,
    admin_pb.DeleteBlacklistRequest,
    admin_pb.DeleteBlacklistReply,
    (request: admin_pb.DeleteBlacklistRequest) => {
      return request.serializeBinary();
    },
    admin_pb.DeleteBlacklistReply.deserializeBinary
  );

  mqtt_broker_delete_blacklist(
    request: admin_pb.DeleteBlacklistRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.DeleteBlacklistReply>;

  mqtt_broker_delete_blacklist(
    request: admin_pb.DeleteBlacklistRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteBlacklistReply) => void): grpcWeb.ClientReadableStream<admin_pb.DeleteBlacklistReply>;

  mqtt_broker_delete_blacklist(
    request: admin_pb.DeleteBlacklistRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteBlacklistReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_blacklist',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_delete_blacklist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_blacklist',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_delete_blacklist);
  }

  methodDescriptormqtt_broker_create_blacklist = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_blacklist',
    grpcWeb.MethodType.UNARY,
    admin_pb.CreateBlacklistRequest,
    admin_pb.CreateBlacklistReply,
    (request: admin_pb.CreateBlacklistRequest) => {
      return request.serializeBinary();
    },
    admin_pb.CreateBlacklistReply.deserializeBinary
  );

  mqtt_broker_create_blacklist(
    request: admin_pb.CreateBlacklistRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.CreateBlacklistReply>;

  mqtt_broker_create_blacklist(
    request: admin_pb.CreateBlacklistRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.CreateBlacklistReply) => void): grpcWeb.ClientReadableStream<admin_pb.CreateBlacklistReply>;

  mqtt_broker_create_blacklist(
    request: admin_pb.CreateBlacklistRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.CreateBlacklistReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_blacklist',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_create_blacklist,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_blacklist',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_create_blacklist);
  }

  methodDescriptormqtt_broker_enable_flapping_detect = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_enable_flapping_detect',
    grpcWeb.MethodType.UNARY,
    admin_pb.EnableFlappingDetectRequest,
    admin_pb.EnableFlappingDetectReply,
    (request: admin_pb.EnableFlappingDetectRequest) => {
      return request.serializeBinary();
    },
    admin_pb.EnableFlappingDetectReply.deserializeBinary
  );

  mqtt_broker_enable_flapping_detect(
    request: admin_pb.EnableFlappingDetectRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.EnableFlappingDetectReply>;

  mqtt_broker_enable_flapping_detect(
    request: admin_pb.EnableFlappingDetectRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.EnableFlappingDetectReply) => void): grpcWeb.ClientReadableStream<admin_pb.EnableFlappingDetectReply>;

  mqtt_broker_enable_flapping_detect(
    request: admin_pb.EnableFlappingDetectRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.EnableFlappingDetectReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_enable_flapping_detect',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_enable_flapping_detect,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_enable_flapping_detect',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_enable_flapping_detect);
  }

  methodDescriptormqtt_broker_set_system_alarm_config = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_system_alarm_config',
    grpcWeb.MethodType.UNARY,
    admin_pb.SetSystemAlarmConfigRequest,
    admin_pb.SetSystemAlarmConfigReply,
    (request: admin_pb.SetSystemAlarmConfigRequest) => {
      return request.serializeBinary();
    },
    admin_pb.SetSystemAlarmConfigReply.deserializeBinary
  );

  mqtt_broker_set_system_alarm_config(
    request: admin_pb.SetSystemAlarmConfigRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.SetSystemAlarmConfigReply>;

  mqtt_broker_set_system_alarm_config(
    request: admin_pb.SetSystemAlarmConfigRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.SetSystemAlarmConfigReply) => void): grpcWeb.ClientReadableStream<admin_pb.SetSystemAlarmConfigReply>;

  mqtt_broker_set_system_alarm_config(
    request: admin_pb.SetSystemAlarmConfigRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.SetSystemAlarmConfigReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_system_alarm_config',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_set_system_alarm_config,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_system_alarm_config',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_set_system_alarm_config);
  }

  methodDescriptormqtt_broker_list_system_alarm = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_system_alarm',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListSystemAlarmRequest,
    admin_pb.ListSystemAlarmReply,
    (request: admin_pb.ListSystemAlarmRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListSystemAlarmReply.deserializeBinary
  );

  mqtt_broker_list_system_alarm(
    request: admin_pb.ListSystemAlarmRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListSystemAlarmReply>;

  mqtt_broker_list_system_alarm(
    request: admin_pb.ListSystemAlarmRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListSystemAlarmReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListSystemAlarmReply>;

  mqtt_broker_list_system_alarm(
    request: admin_pb.ListSystemAlarmRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListSystemAlarmReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_system_alarm',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_system_alarm,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_system_alarm',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_system_alarm);
  }

  methodDescriptormqtt_broker_list_connection = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_connection',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListConnectionRequest,
    admin_pb.ListConnectionReply,
    (request: admin_pb.ListConnectionRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListConnectionReply.deserializeBinary
  );

  mqtt_broker_list_connection(
    request: admin_pb.ListConnectionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListConnectionReply>;

  mqtt_broker_list_connection(
    request: admin_pb.ListConnectionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListConnectionReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListConnectionReply>;

  mqtt_broker_list_connection(
    request: admin_pb.ListConnectionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListConnectionReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_connection',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_connection,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_connection',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_connection);
  }

  methodDescriptormqtt_broker_list_slow_subscribe = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_slow_subscribe',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListSlowSubscribeRequest,
    admin_pb.ListSlowSubscribeReply,
    (request: admin_pb.ListSlowSubscribeRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListSlowSubscribeReply.deserializeBinary
  );

  mqtt_broker_list_slow_subscribe(
    request: admin_pb.ListSlowSubscribeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListSlowSubscribeReply>;

  mqtt_broker_list_slow_subscribe(
    request: admin_pb.ListSlowSubscribeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListSlowSubscribeReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListSlowSubscribeReply>;

  mqtt_broker_list_slow_subscribe(
    request: admin_pb.ListSlowSubscribeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListSlowSubscribeReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_slow_subscribe',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_slow_subscribe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_slow_subscribe',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_slow_subscribe);
  }

  methodDescriptormqtt_broker_list_topic = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_topic',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListTopicRequest,
    admin_pb.ListTopicReply,
    (request: admin_pb.ListTopicRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListTopicReply.deserializeBinary
  );

  mqtt_broker_list_topic(
    request: admin_pb.ListTopicRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListTopicReply>;

  mqtt_broker_list_topic(
    request: admin_pb.ListTopicRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListTopicReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListTopicReply>;

  mqtt_broker_list_topic(
    request: admin_pb.ListTopicRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListTopicReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_topic',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_topic,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_topic',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_topic);
  }

  methodDescriptormqtt_broker_delete_topic_rewrite_rule = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_topic_rewrite_rule',
    grpcWeb.MethodType.UNARY,
    admin_pb.DeleteTopicRewriteRuleRequest,
    admin_pb.DeleteTopicRewriteRuleReply,
    (request: admin_pb.DeleteTopicRewriteRuleRequest) => {
      return request.serializeBinary();
    },
    admin_pb.DeleteTopicRewriteRuleReply.deserializeBinary
  );

  mqtt_broker_delete_topic_rewrite_rule(
    request: admin_pb.DeleteTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.DeleteTopicRewriteRuleReply>;

  mqtt_broker_delete_topic_rewrite_rule(
    request: admin_pb.DeleteTopicRewriteRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteTopicRewriteRuleReply) => void): grpcWeb.ClientReadableStream<admin_pb.DeleteTopicRewriteRuleReply>;

  mqtt_broker_delete_topic_rewrite_rule(
    request: admin_pb.DeleteTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteTopicRewriteRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_topic_rewrite_rule',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_delete_topic_rewrite_rule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_topic_rewrite_rule',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_delete_topic_rewrite_rule);
  }

  methodDescriptormqtt_broker_create_topic_rewrite_rule = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_topic_rewrite_rule',
    grpcWeb.MethodType.UNARY,
    admin_pb.CreateTopicRewriteRuleRequest,
    admin_pb.CreateTopicRewriteRuleReply,
    (request: admin_pb.CreateTopicRewriteRuleRequest) => {
      return request.serializeBinary();
    },
    admin_pb.CreateTopicRewriteRuleReply.deserializeBinary
  );

  mqtt_broker_create_topic_rewrite_rule(
    request: admin_pb.CreateTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.CreateTopicRewriteRuleReply>;

  mqtt_broker_create_topic_rewrite_rule(
    request: admin_pb.CreateTopicRewriteRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.CreateTopicRewriteRuleReply) => void): grpcWeb.ClientReadableStream<admin_pb.CreateTopicRewriteRuleReply>;

  mqtt_broker_create_topic_rewrite_rule(
    request: admin_pb.CreateTopicRewriteRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.CreateTopicRewriteRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_topic_rewrite_rule',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_create_topic_rewrite_rule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_topic_rewrite_rule',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_create_topic_rewrite_rule);
  }

  methodDescriptormqtt_broker_get_all_topic_rewrite_rule = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_get_all_topic_rewrite_rule',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListRewriteTopicRuleRequest,
    admin_pb.ListRewriteTopicRuleReply,
    (request: admin_pb.ListRewriteTopicRuleRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListRewriteTopicRuleReply.deserializeBinary
  );

  mqtt_broker_get_all_topic_rewrite_rule(
    request: admin_pb.ListRewriteTopicRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListRewriteTopicRuleReply>;

  mqtt_broker_get_all_topic_rewrite_rule(
    request: admin_pb.ListRewriteTopicRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListRewriteTopicRuleReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListRewriteTopicRuleReply>;

  mqtt_broker_get_all_topic_rewrite_rule(
    request: admin_pb.ListRewriteTopicRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListRewriteTopicRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_get_all_topic_rewrite_rule',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_get_all_topic_rewrite_rule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_get_all_topic_rewrite_rule',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_get_all_topic_rewrite_rule);
  }

  methodDescriptormqtt_broker_list_connector = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_connector',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttListConnectorRequest,
    admin_pb.MqttListConnectorReply,
    (request: admin_pb.MqttListConnectorRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttListConnectorReply.deserializeBinary
  );

  mqtt_broker_list_connector(
    request: admin_pb.MqttListConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttListConnectorReply>;

  mqtt_broker_list_connector(
    request: admin_pb.MqttListConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttListConnectorReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttListConnectorReply>;

  mqtt_broker_list_connector(
    request: admin_pb.MqttListConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttListConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_connector',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_connector,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_connector',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_connector);
  }

  methodDescriptormqtt_broker_create_connector = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_connector',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttCreateConnectorRequest,
    admin_pb.MqttCreateConnectorReply,
    (request: admin_pb.MqttCreateConnectorRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttCreateConnectorReply.deserializeBinary
  );

  mqtt_broker_create_connector(
    request: admin_pb.MqttCreateConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttCreateConnectorReply>;

  mqtt_broker_create_connector(
    request: admin_pb.MqttCreateConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttCreateConnectorReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttCreateConnectorReply>;

  mqtt_broker_create_connector(
    request: admin_pb.MqttCreateConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttCreateConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_connector',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_create_connector,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_connector',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_create_connector);
  }

  methodDescriptormqtt_broker_delete_connector = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_connector',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttDeleteConnectorRequest,
    admin_pb.MqttDeleteConnectorReply,
    (request: admin_pb.MqttDeleteConnectorRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttDeleteConnectorReply.deserializeBinary
  );

  mqtt_broker_delete_connector(
    request: admin_pb.MqttDeleteConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttDeleteConnectorReply>;

  mqtt_broker_delete_connector(
    request: admin_pb.MqttDeleteConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttDeleteConnectorReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttDeleteConnectorReply>;

  mqtt_broker_delete_connector(
    request: admin_pb.MqttDeleteConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttDeleteConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_connector',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_delete_connector,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_connector',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_delete_connector);
  }

  methodDescriptormqtt_broker_update_connector = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_update_connector',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttUpdateConnectorRequest,
    admin_pb.MqttUpdateConnectorReply,
    (request: admin_pb.MqttUpdateConnectorRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttUpdateConnectorReply.deserializeBinary
  );

  mqtt_broker_update_connector(
    request: admin_pb.MqttUpdateConnectorRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttUpdateConnectorReply>;

  mqtt_broker_update_connector(
    request: admin_pb.MqttUpdateConnectorRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttUpdateConnectorReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttUpdateConnectorReply>;

  mqtt_broker_update_connector(
    request: admin_pb.MqttUpdateConnectorRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttUpdateConnectorReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_update_connector',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_update_connector,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_update_connector',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_update_connector);
  }

  methodDescriptormqtt_broker_list_schema = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_schema',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttListSchemaRequest,
    admin_pb.MqttListSchemaReply,
    (request: admin_pb.MqttListSchemaRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttListSchemaReply.deserializeBinary
  );

  mqtt_broker_list_schema(
    request: admin_pb.MqttListSchemaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttListSchemaReply>;

  mqtt_broker_list_schema(
    request: admin_pb.MqttListSchemaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttListSchemaReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttListSchemaReply>;

  mqtt_broker_list_schema(
    request: admin_pb.MqttListSchemaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttListSchemaReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_schema',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_schema,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_schema',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_schema);
  }

  methodDescriptormqtt_broker_create_schema = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_schema',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttCreateSchemaRequest,
    admin_pb.MqttCreateSchemaReply,
    (request: admin_pb.MqttCreateSchemaRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttCreateSchemaReply.deserializeBinary
  );

  mqtt_broker_create_schema(
    request: admin_pb.MqttCreateSchemaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttCreateSchemaReply>;

  mqtt_broker_create_schema(
    request: admin_pb.MqttCreateSchemaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttCreateSchemaReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttCreateSchemaReply>;

  mqtt_broker_create_schema(
    request: admin_pb.MqttCreateSchemaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttCreateSchemaReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_schema',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_create_schema,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_create_schema',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_create_schema);
  }

  methodDescriptormqtt_broker_update_schema = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_update_schema',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttUpdateSchemaRequest,
    admin_pb.MqttUpdateSchemaReply,
    (request: admin_pb.MqttUpdateSchemaRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttUpdateSchemaReply.deserializeBinary
  );

  mqtt_broker_update_schema(
    request: admin_pb.MqttUpdateSchemaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttUpdateSchemaReply>;

  mqtt_broker_update_schema(
    request: admin_pb.MqttUpdateSchemaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttUpdateSchemaReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttUpdateSchemaReply>;

  mqtt_broker_update_schema(
    request: admin_pb.MqttUpdateSchemaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttUpdateSchemaReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_update_schema',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_update_schema,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_update_schema',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_update_schema);
  }

  methodDescriptormqtt_broker_delete_schema = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_schema',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttDeleteSchemaRequest,
    admin_pb.MqttDeleteSchemaReply,
    (request: admin_pb.MqttDeleteSchemaRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttDeleteSchemaReply.deserializeBinary
  );

  mqtt_broker_delete_schema(
    request: admin_pb.MqttDeleteSchemaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttDeleteSchemaReply>;

  mqtt_broker_delete_schema(
    request: admin_pb.MqttDeleteSchemaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttDeleteSchemaReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttDeleteSchemaReply>;

  mqtt_broker_delete_schema(
    request: admin_pb.MqttDeleteSchemaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttDeleteSchemaReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_schema',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_delete_schema,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_schema',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_delete_schema);
  }

  methodDescriptormqtt_broker_list_bind_schema = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_bind_schema',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttListBindSchemaRequest,
    admin_pb.MqttListBindSchemaReply,
    (request: admin_pb.MqttListBindSchemaRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttListBindSchemaReply.deserializeBinary
  );

  mqtt_broker_list_bind_schema(
    request: admin_pb.MqttListBindSchemaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttListBindSchemaReply>;

  mqtt_broker_list_bind_schema(
    request: admin_pb.MqttListBindSchemaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttListBindSchemaReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttListBindSchemaReply>;

  mqtt_broker_list_bind_schema(
    request: admin_pb.MqttListBindSchemaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttListBindSchemaReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_bind_schema',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_bind_schema,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_bind_schema',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_bind_schema);
  }

  methodDescriptormqtt_broker_bind_schema = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_bind_schema',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttBindSchemaRequest,
    admin_pb.MqttBindSchemaReply,
    (request: admin_pb.MqttBindSchemaRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttBindSchemaReply.deserializeBinary
  );

  mqtt_broker_bind_schema(
    request: admin_pb.MqttBindSchemaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttBindSchemaReply>;

  mqtt_broker_bind_schema(
    request: admin_pb.MqttBindSchemaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttBindSchemaReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttBindSchemaReply>;

  mqtt_broker_bind_schema(
    request: admin_pb.MqttBindSchemaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttBindSchemaReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_bind_schema',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_bind_schema,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_bind_schema',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_bind_schema);
  }

  methodDescriptormqtt_broker_unbind_schema = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_unbind_schema',
    grpcWeb.MethodType.UNARY,
    admin_pb.MqttUnbindSchemaRequest,
    admin_pb.MqttUnbindSchemaReply,
    (request: admin_pb.MqttUnbindSchemaRequest) => {
      return request.serializeBinary();
    },
    admin_pb.MqttUnbindSchemaReply.deserializeBinary
  );

  mqtt_broker_unbind_schema(
    request: admin_pb.MqttUnbindSchemaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.MqttUnbindSchemaReply>;

  mqtt_broker_unbind_schema(
    request: admin_pb.MqttUnbindSchemaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.MqttUnbindSchemaReply) => void): grpcWeb.ClientReadableStream<admin_pb.MqttUnbindSchemaReply>;

  mqtt_broker_unbind_schema(
    request: admin_pb.MqttUnbindSchemaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.MqttUnbindSchemaReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_unbind_schema',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_unbind_schema,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_unbind_schema',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_unbind_schema);
  }

  methodDescriptormqtt_broker_set_auto_subscribe_rule = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_auto_subscribe_rule',
    grpcWeb.MethodType.UNARY,
    admin_pb.SetAutoSubscribeRuleRequest,
    admin_pb.SetAutoSubscribeRuleReply,
    (request: admin_pb.SetAutoSubscribeRuleRequest) => {
      return request.serializeBinary();
    },
    admin_pb.SetAutoSubscribeRuleReply.deserializeBinary
  );

  mqtt_broker_set_auto_subscribe_rule(
    request: admin_pb.SetAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.SetAutoSubscribeRuleReply>;

  mqtt_broker_set_auto_subscribe_rule(
    request: admin_pb.SetAutoSubscribeRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.SetAutoSubscribeRuleReply) => void): grpcWeb.ClientReadableStream<admin_pb.SetAutoSubscribeRuleReply>;

  mqtt_broker_set_auto_subscribe_rule(
    request: admin_pb.SetAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.SetAutoSubscribeRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_auto_subscribe_rule',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_set_auto_subscribe_rule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_set_auto_subscribe_rule',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_set_auto_subscribe_rule);
  }

  methodDescriptormqtt_broker_delete_auto_subscribe_rule = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_auto_subscribe_rule',
    grpcWeb.MethodType.UNARY,
    admin_pb.DeleteAutoSubscribeRuleRequest,
    admin_pb.DeleteAutoSubscribeRuleReply,
    (request: admin_pb.DeleteAutoSubscribeRuleRequest) => {
      return request.serializeBinary();
    },
    admin_pb.DeleteAutoSubscribeRuleReply.deserializeBinary
  );

  mqtt_broker_delete_auto_subscribe_rule(
    request: admin_pb.DeleteAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.DeleteAutoSubscribeRuleReply>;

  mqtt_broker_delete_auto_subscribe_rule(
    request: admin_pb.DeleteAutoSubscribeRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteAutoSubscribeRuleReply) => void): grpcWeb.ClientReadableStream<admin_pb.DeleteAutoSubscribeRuleReply>;

  mqtt_broker_delete_auto_subscribe_rule(
    request: admin_pb.DeleteAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.DeleteAutoSubscribeRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_auto_subscribe_rule',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_delete_auto_subscribe_rule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_delete_auto_subscribe_rule',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_delete_auto_subscribe_rule);
  }

  methodDescriptormqtt_broker_list_auto_subscribe_rule = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_auto_subscribe_rule',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListAutoSubscribeRuleRequest,
    admin_pb.ListAutoSubscribeRuleReply,
    (request: admin_pb.ListAutoSubscribeRuleRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListAutoSubscribeRuleReply.deserializeBinary
  );

  mqtt_broker_list_auto_subscribe_rule(
    request: admin_pb.ListAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListAutoSubscribeRuleReply>;

  mqtt_broker_list_auto_subscribe_rule(
    request: admin_pb.ListAutoSubscribeRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListAutoSubscribeRuleReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListAutoSubscribeRuleReply>;

  mqtt_broker_list_auto_subscribe_rule(
    request: admin_pb.ListAutoSubscribeRuleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListAutoSubscribeRuleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_auto_subscribe_rule',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_auto_subscribe_rule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_auto_subscribe_rule',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_auto_subscribe_rule);
  }

  methodDescriptormqtt_broker_list_subscribe = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_subscribe',
    grpcWeb.MethodType.UNARY,
    admin_pb.ListSubscribeRequest,
    admin_pb.ListSubscribeReply,
    (request: admin_pb.ListSubscribeRequest) => {
      return request.serializeBinary();
    },
    admin_pb.ListSubscribeReply.deserializeBinary
  );

  mqtt_broker_list_subscribe(
    request: admin_pb.ListSubscribeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.ListSubscribeReply>;

  mqtt_broker_list_subscribe(
    request: admin_pb.ListSubscribeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.ListSubscribeReply) => void): grpcWeb.ClientReadableStream<admin_pb.ListSubscribeReply>;

  mqtt_broker_list_subscribe(
    request: admin_pb.ListSubscribeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.ListSubscribeReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_subscribe',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_list_subscribe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_list_subscribe',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_list_subscribe);
  }

  methodDescriptormqtt_broker_subscribe_detail = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_subscribe_detail',
    grpcWeb.MethodType.UNARY,
    admin_pb.SubscribeDetailRequest,
    admin_pb.SubscribeDetailReply,
    (request: admin_pb.SubscribeDetailRequest) => {
      return request.serializeBinary();
    },
    admin_pb.SubscribeDetailReply.deserializeBinary
  );

  mqtt_broker_subscribe_detail(
    request: admin_pb.SubscribeDetailRequest,
    metadata?: grpcWeb.Metadata | null): Promise<admin_pb.SubscribeDetailReply>;

  mqtt_broker_subscribe_detail(
    request: admin_pb.SubscribeDetailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.SubscribeDetailReply) => void): grpcWeb.ClientReadableStream<admin_pb.SubscribeDetailReply>;

  mqtt_broker_subscribe_detail(
    request: admin_pb.SubscribeDetailRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.SubscribeDetailReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_subscribe_detail',
        request,
        metadata || {},
        this.methodDescriptormqtt_broker_subscribe_detail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.admin.MQTTBrokerAdminService/mqtt_broker_subscribe_detail',
    request,
    metadata || {},
    this.methodDescriptormqtt_broker_subscribe_detail);
  }

}

