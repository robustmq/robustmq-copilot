// source: inner.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.broker.mqtt.inner.DeleteSessionReply', null, global);
goog.exportSymbol('proto.broker.mqtt.inner.DeleteSessionRequest', null, global);
goog.exportSymbol('proto.broker.mqtt.inner.MQTTBrokerUpdateCacheActionType', null, global);
goog.exportSymbol('proto.broker.mqtt.inner.MQTTBrokerUpdateCacheResourceType', null, global);
goog.exportSymbol('proto.broker.mqtt.inner.SendLastWillMessageReply', null, global);
goog.exportSymbol('proto.broker.mqtt.inner.SendLastWillMessageRequest', null, global);
goog.exportSymbol('proto.broker.mqtt.inner.UpdateMQTTCacheReply', null, global);
goog.exportSymbol('proto.broker.mqtt.inner.UpdateMQTTCacheRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.broker.mqtt.inner.UpdateMQTTCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.broker.mqtt.inner.UpdateMQTTCacheRequest.displayName = 'proto.broker.mqtt.inner.UpdateMQTTCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.broker.mqtt.inner.UpdateMQTTCacheReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.broker.mqtt.inner.UpdateMQTTCacheReply.displayName = 'proto.broker.mqtt.inner.UpdateMQTTCacheReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.broker.mqtt.inner.DeleteSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.broker.mqtt.inner.DeleteSessionRequest.repeatedFields_, null);
};
goog.inherits(proto.broker.mqtt.inner.DeleteSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.broker.mqtt.inner.DeleteSessionRequest.displayName = 'proto.broker.mqtt.inner.DeleteSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.broker.mqtt.inner.DeleteSessionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.broker.mqtt.inner.DeleteSessionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.broker.mqtt.inner.DeleteSessionReply.displayName = 'proto.broker.mqtt.inner.DeleteSessionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.broker.mqtt.inner.SendLastWillMessageReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.broker.mqtt.inner.SendLastWillMessageReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.broker.mqtt.inner.SendLastWillMessageReply.displayName = 'proto.broker.mqtt.inner.SendLastWillMessageReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.broker.mqtt.inner.SendLastWillMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.broker.mqtt.inner.SendLastWillMessageRequest.displayName = 'proto.broker.mqtt.inner.SendLastWillMessageRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.broker.mqtt.inner.UpdateMQTTCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
clusterName: jspb.Message.getFieldWithDefault(msg, 1, ""),
actionType: jspb.Message.getFieldWithDefault(msg, 2, 0),
resourceType: jspb.Message.getFieldWithDefault(msg, 3, 0),
data: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.broker.mqtt.inner.UpdateMQTTCacheRequest;
  return proto.broker.mqtt.inner.UpdateMQTTCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterName(value);
      break;
    case 2:
      var value = /** @type {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheActionType} */ (reader.readEnum());
      msg.setActionType(value);
      break;
    case 3:
      var value = /** @type {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheResourceType} */ (reader.readEnum());
      msg.setResourceType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.broker.mqtt.inner.UpdateMQTTCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string cluster_name = 1;
 * @return {string}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.getClusterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest} returns this
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.setClusterName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MQTTBrokerUpdateCacheActionType action_type = 2;
 * @return {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheActionType}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.getActionType = function() {
  return /** @type {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheActionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheActionType} value
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest} returns this
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.setActionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional MQTTBrokerUpdateCacheResourceType resource_type = 3;
 * @return {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheResourceType}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.getResourceType = function() {
  return /** @type {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheResourceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.broker.mqtt.inner.MQTTBrokerUpdateCacheResourceType} value
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest} returns this
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.setResourceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string data = 4;
 * @return {string}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheRequest} returns this
 */
proto.broker.mqtt.inner.UpdateMQTTCacheRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.prototype.toObject = function(opt_includeInstance) {
  return proto.broker.mqtt.inner.UpdateMQTTCacheReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.broker.mqtt.inner.UpdateMQTTCacheReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.toObject = function(includeInstance, msg) {
  var f, obj = {
code: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
data: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheReply}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.broker.mqtt.inner.UpdateMQTTCacheReply;
  return proto.broker.mqtt.inner.UpdateMQTTCacheReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.broker.mqtt.inner.UpdateMQTTCacheReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheReply}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.broker.mqtt.inner.UpdateMQTTCacheReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.broker.mqtt.inner.UpdateMQTTCacheReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool code = 1;
 * @return {boolean}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.prototype.getCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheReply} returns this
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.broker.mqtt.inner.UpdateMQTTCacheReply} returns this
 */
proto.broker.mqtt.inner.UpdateMQTTCacheReply.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.broker.mqtt.inner.DeleteSessionRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.broker.mqtt.inner.DeleteSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.broker.mqtt.inner.DeleteSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.DeleteSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
clusterName: jspb.Message.getFieldWithDefault(msg, 1, ""),
clientIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.broker.mqtt.inner.DeleteSessionRequest}
 */
proto.broker.mqtt.inner.DeleteSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.broker.mqtt.inner.DeleteSessionRequest;
  return proto.broker.mqtt.inner.DeleteSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.broker.mqtt.inner.DeleteSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.broker.mqtt.inner.DeleteSessionRequest}
 */
proto.broker.mqtt.inner.DeleteSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.broker.mqtt.inner.DeleteSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.broker.mqtt.inner.DeleteSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.DeleteSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string cluster_name = 1;
 * @return {string}
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.getClusterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.broker.mqtt.inner.DeleteSessionRequest} returns this
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.setClusterName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string client_id = 2;
 * @return {!Array<string>}
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.getClientIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.broker.mqtt.inner.DeleteSessionRequest} returns this
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.setClientIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.broker.mqtt.inner.DeleteSessionRequest} returns this
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.addClientId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.broker.mqtt.inner.DeleteSessionRequest} returns this
 */
proto.broker.mqtt.inner.DeleteSessionRequest.prototype.clearClientIdList = function() {
  return this.setClientIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.broker.mqtt.inner.DeleteSessionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.broker.mqtt.inner.DeleteSessionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.broker.mqtt.inner.DeleteSessionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.DeleteSessionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
code: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
data: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.broker.mqtt.inner.DeleteSessionReply}
 */
proto.broker.mqtt.inner.DeleteSessionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.broker.mqtt.inner.DeleteSessionReply;
  return proto.broker.mqtt.inner.DeleteSessionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.broker.mqtt.inner.DeleteSessionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.broker.mqtt.inner.DeleteSessionReply}
 */
proto.broker.mqtt.inner.DeleteSessionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.broker.mqtt.inner.DeleteSessionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.broker.mqtt.inner.DeleteSessionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.broker.mqtt.inner.DeleteSessionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.DeleteSessionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool code = 1;
 * @return {boolean}
 */
proto.broker.mqtt.inner.DeleteSessionReply.prototype.getCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.broker.mqtt.inner.DeleteSessionReply} returns this
 */
proto.broker.mqtt.inner.DeleteSessionReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.broker.mqtt.inner.DeleteSessionReply.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.broker.mqtt.inner.DeleteSessionReply} returns this
 */
proto.broker.mqtt.inner.DeleteSessionReply.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.prototype.toObject = function(opt_includeInstance) {
  return proto.broker.mqtt.inner.SendLastWillMessageReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.broker.mqtt.inner.SendLastWillMessageReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.toObject = function(includeInstance, msg) {
  var f, obj = {
code: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
data: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageReply}
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.broker.mqtt.inner.SendLastWillMessageReply;
  return proto.broker.mqtt.inner.SendLastWillMessageReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.broker.mqtt.inner.SendLastWillMessageReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageReply}
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.broker.mqtt.inner.SendLastWillMessageReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.broker.mqtt.inner.SendLastWillMessageReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool code = 1;
 * @return {boolean}
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.prototype.getCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageReply} returns this
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageReply} returns this
 */
proto.broker.mqtt.inner.SendLastWillMessageReply.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.broker.mqtt.inner.SendLastWillMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.broker.mqtt.inner.SendLastWillMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
lastWillMessage: msg.getLastWillMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageRequest}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.broker.mqtt.inner.SendLastWillMessageRequest;
  return proto.broker.mqtt.inner.SendLastWillMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.broker.mqtt.inner.SendLastWillMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageRequest}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastWillMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.broker.mqtt.inner.SendLastWillMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.broker.mqtt.inner.SendLastWillMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastWillMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageRequest} returns this
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes last_will_message = 2;
 * @return {string}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.getLastWillMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes last_will_message = 2;
 * This is a type-conversion wrapper around `getLastWillMessage()`
 * @return {string}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.getLastWillMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastWillMessage()));
};


/**
 * optional bytes last_will_message = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastWillMessage()`
 * @return {!Uint8Array}
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.getLastWillMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastWillMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.broker.mqtt.inner.SendLastWillMessageRequest} returns this
 */
proto.broker.mqtt.inner.SendLastWillMessageRequest.prototype.setLastWillMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.broker.mqtt.inner.MQTTBrokerUpdateCacheActionType = {
  SET: 0,
  DELETE: 1
};

/**
 * @enum {number}
 */
proto.broker.mqtt.inner.MQTTBrokerUpdateCacheResourceType = {
  SESSION: 0,
  USER: 1,
  SUBSCRIBE: 2,
  TOPIC: 3,
  CONNECTOR: 4,
  SCHEMA: 5,
  SCHEMARESOURCE: 6,
  CLUSTERRESOURCECONFIG: 7
};

goog.object.extend(exports, proto.broker.mqtt.inner);
